//
//===============================================
//  $MIXINS
//===============================================
//


// Create a fully formed type style (sizing and vertical rhythm)
//
// `@include font-size(10px);`
@mixin font-size($font-size) {
  font-size: ($font-size / $base-font-size) * 1rem;
}

// PX to EM conversion
//
// `@include calc-em(10px, 20px)`
@function calc-em($target, $context: 18px) {
  @if $target == 0 { @return 0 };
  @return $target / $context * 1em; 
}

// Truncate Text, e.g.:
//
// `@include truncate(100%);`
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap; 
}

// CSS arrows!!! But... before you read on, you might want to grab a coffee...
//
// `@include arrow(top, left, red)`
// for just a single, red arrow, or:
//
// `@include arrow(bottom, center, red, black)`
// will create a red triangle with a black border which sits at the bottom
// center of the element. Call the mixin thus:
@mixin arrow($arrow-edge, $arrow-location, $arrow-color, $border-color: $arrow-color) {
  @if $arrow-edge == top {
    @extend %arrow--top;

    &:before {
      border-bottom-color: $border-color; 
    }

    &:after {
      border-bottom-color: $arrow-color; 
    }

    @if $arrow-location == left {
      @extend %arrow--left; 
    }

    @if $arrow-location == center {
      @extend %arrow--center; 
    }

    @if $arrow-location == right {
      @extend %arrow--right; 
    }
  }

  @if $arrow-edge == right {
    @extend %arrow--far;

    &:before {
      border-left-color: $border-color; 
    }

    &:after {
      border-left-color: $arrow-color; 
    }

    @if $arrow-location == top {
      @extend %arrow--upper; 
    }

    @if $arrow-location == center {
      @extend %arrow--middle; 
    }

    @if $arrow-location == bottom {
      @extend %arrow--lower; 
    }
  }

  @if $arrow-edge == bottom{
    @extend %arrow--bottom;

    &:before {
      border-top-color: $border-color; 
    }

    &:after {
      border-top-color: $arrow-color; 
    }

    @if $arrow-location == left {
      @extend %arrow--left; 
    }

    @if $arrow-location == center {
      @extend %arrow--center; 
    }

    @if $arrow-location == right {
      @extend %arrow--right; 
    }
  }

  @if $arrow-edge == left{
    @extend %arrow--near;

    &:before {
      border-right-color: $border-color; 
    }

    &:after {
      border-right-color: $arrow-color; 
    }

    @if $arrow-location == top {
      @extend %arrow--upper; 
    }

    @if $arrow-location == center {
      @extend %arrow--middle; 
    }

    @if $arrow-location == bottom {
      @extend %arrow--lower; 
    }
  }
}

// Media queries
$palm-end: $lap-start - .063em;
$lap-end: $desk-start - .063em;

@mixin media-query($media-query) {
  @if $media-query == palm{
    @media only screen and (max-width:$palm-end) {
      @content; 
    }
  }

  @if $media-query == lap {
    @media only screen and (min-width:$lap-start) and (max-width:$lap-end) {
      @content; 
    }
  }

  @if $media-query == lap-and-up {
    @media only screen and (min-width:$lap-start) {
      @content; 
    }
  }

  @if $media-query == portable {
    @media only screen and (max-width:$lap-end) {
      @content; 
    }
  }

  @if $media-query == desk {
    @media only screen and (min-width:$desk-start) {
      @content; 
    }
  }
}
